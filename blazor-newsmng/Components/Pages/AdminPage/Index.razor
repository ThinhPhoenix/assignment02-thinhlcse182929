@page "/accounts"
@using newsmng_bussinessobject
@using newsmng_repository
@inject ISystemAccountRepository accountRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Account Management</PageTitle>

<h1>Account Management</h1>

<p>
    <a href="/accounts/create" class="btn btn-primary">Create New</a>
</p>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (error)
{
    <div class="alert alert-danger">
        <p>@errorMessage</p>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Account Name</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Password</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var account in accounts)
                {
                    <tr>
                        <td>@account.AccountName</td>
                        <td>@account.AccountEmail</td>
                        <td>@GetRoleName(account.AccountRole)</td>
                        <td>@account.AccountPassword</td>
                        <td>
                            <a href="@($"/accounts/edit/{account.AccountId}")" class="btn btn-warning btn-sm">Edit</a>
                            <a href="@($"/accounts/details/{account.AccountId}")" class="btn btn-info btn-sm">Details</a>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteAccount(account.AccountId)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IList<SystemAccount> accounts = new List<SystemAccount>();
    private bool loading = true;
    private bool error = false;
    private string errorMessage = string.Empty;
    private SystemAccount? currentUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user from session storage for authorization check
            var userJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
            if (!string.IsNullOrEmpty(userJson))
            {
                currentUser = System.Text.Json.JsonSerializer.Deserialize<SystemAccount>(userJson);
                
                // Check if user is admin (role 0)
                if (currentUser == null || currentUser.AccountRole != 0)
                {
                    NavigationManager.NavigateTo("/unauthorized");
                    return;
                }
            }
            else
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Load all accounts
            accounts = accountRepository.GetAll();
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = $"Error loading accounts: {ex.Message}";
            Console.WriteLine($"Error details: {ex}");
        }
        finally
        {
            loading = false;
        }
    }
    
    private string GetRoleName(int? role)
    {
        return role switch
        {
            0 => "Admin",
            1 => "Staff",
            2 => "Lecturer"
        };
    }

    private async Task DeleteAccount(short accountId)
    {
        // Don't allow deleting your own account
        if (currentUser?.AccountId == accountId)
        {
            await JSRuntime.InvokeVoidAsync("alert", "You cannot delete your own account!");
            return;
        }
        
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this account?"))
        {
            try
            {
                accountRepository.Delete(accountId);
                accounts = accountRepository.GetAll(); // Refresh the list
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting account: {ex.Message}");
            }
        }
    }
}