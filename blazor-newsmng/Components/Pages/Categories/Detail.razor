@page "/categories/details/{Id:int}"
@using newsmng_bussinessobject
@using newsmng_repository
@inject ICategoryRepository categoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Category Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Category</h4>
    <hr />
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mb-3">
            @errorMessage
        </div>
    }
    
    @if (category != null)
    {
        <dl class="row">
            <dt class="col-sm-3">
                Category ID
            </dt>
            <dd class="col-sm-9">
                @category.CategoryId
            </dd>
            
            <dt class="col-sm-3">
                Category Name
            </dt>
            <dd class="col-sm-9">
                @category.CategoryName
            </dd>
            
            <dt class="col-sm-3">
                Description
            </dt>
            <dd class="col-sm-9">
                @category.CategoryDesciption
            </dd>
            
            <dt class="col-sm-3">
                Parent Category
            </dt>
            <dd class="col-sm-9">
                @if (category.ParentCategoryId.HasValue)
                {
                    var parent = categoryRepository.GetOne(category.ParentCategoryId.Value);
                    if (parent != null)
                    {
                        <a href="/categories/details/@parent.CategoryId">@parent.CategoryName</a>
                    }
                    else
                    {
                        <span>Parent category not found (ID: @category.ParentCategoryId)</span>
                    }
                }
                else
                {
                    <span>None</span>
                }
            </dd>
            
            <dt class="col-sm-3">
                Status
            </dt>
            <dd class="col-sm-9">
                @if (category.IsActive == true)
                {
                    <span class="badge bg-success">Active</span>
                }
                else
                {
                    <span class="badge bg-secondary">Inactive</span>
                }
            </dd>
            
            @if (category.InverseParentCategory != null && category.InverseParentCategory.Any())
            {
                <dt class="col-sm-3">
                    Subcategories
                </dt>
                <dd class="col-sm-9">
                    <ul>
                        @foreach (var subcategory in category.InverseParentCategory)
                        {
                            <li><a href="/categories/details/@subcategory.CategoryId">@subcategory.CategoryName</a></li>
                        }
                    </ul>
                </dd>
            }
        </dl>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
</div>

<div class="mt-3">
    <a href="/categories/edit/@Id" class="btn btn-primary">Edit</a>
    <a href="/categories" class="btn btn-secondary ms-2">Back to List</a>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Category category;
    private string errorMessage;
    private SystemAccount currentUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check user authentication
            var userJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
            if (string.IsNullOrEmpty(userJson))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            currentUser = System.Text.Json.JsonSerializer.Deserialize<SystemAccount>(userJson);
            
            if (currentUser.AccountRole != 1)
            {
                NavigationManager.NavigateTo("/unauthorized");
                return;
            }

            // Load category - cast int to short
            category = categoryRepository.GetOne((short)Id);
            
            if (category == null)
            {
                errorMessage = "Category not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading category: {ex.Message}";
        }
    }
}